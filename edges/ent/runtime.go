// Code generated by ent, DO NOT EDIT.

package ent

import (
	"github.com/GRTheory/ent-explore/edges/ent/group"
	"github.com/GRTheory/ent-explore/edges/ent/node"
	"github.com/GRTheory/ent-explore/edges/ent/pet"
	"github.com/GRTheory/ent-explore/edges/ent/schema"
	"github.com/GRTheory/ent-explore/edges/ent/user"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	groupFields := schema.Group{}.Fields()
	_ = groupFields
	// groupDescGroupName is the schema descriptor for group_name field.
	groupDescGroupName := groupFields[0].Descriptor()
	// group.GroupNameValidator is a validator for the "group_name" field. It is called by the builders before save.
	group.GroupNameValidator = groupDescGroupName.Validators[0].(func(string) error)
	nodeFields := schema.Node{}.Fields()
	_ = nodeFields
	// nodeDescValue is the schema descriptor for value field.
	nodeDescValue := nodeFields[0].Descriptor()
	// node.ValueValidator is a validator for the "value" field. It is called by the builders before save.
	node.ValueValidator = nodeDescValue.Validators[0].(func(int) error)
	petFields := schema.Pet{}.Fields()
	_ = petFields
	// petDescName is the schema descriptor for name field.
	petDescName := petFields[0].Descriptor()
	// pet.NameValidator is a validator for the "name" field. It is called by the builders before save.
	pet.NameValidator = petDescName.Validators[0].(func(string) error)
	// petDescAge is the schema descriptor for age field.
	petDescAge := petFields[1].Descriptor()
	// pet.DefaultAge holds the default value on creation for the age field.
	pet.DefaultAge = petDescAge.Default.(int)
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescName is the schema descriptor for name field.
	userDescName := userFields[0].Descriptor()
	// user.NameValidator is a validator for the "name" field. It is called by the builders before save.
	user.NameValidator = userDescName.Validators[0].(func(string) error)
	// userDescEmail is the schema descriptor for email field.
	userDescEmail := userFields[1].Descriptor()
	// user.EmailValidator is a validator for the "email" field. It is called by the builders before save.
	user.EmailValidator = userDescEmail.Validators[0].(func(string) error)
}
